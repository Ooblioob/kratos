// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var err, s, _;

  try {
    _ = require('underscore');
  } catch (_error) {
    err = _error;
    _ = require('lib/underscore');
  }

  s = {
    views: {},
    lists: {},
    shows: {},
    rewrites: {}
  };

  s.views.audit_by_date = {
    map: function(doc) {
      var dt, entry, out, typ, _i, _len, _ref, _results;
      _ref = doc.audit;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        dt = new Date(entry.dt);
        typ = doc._id.indexOf('team_') === 0 ? 'team' : 'user';
        out = {
          _id: doc._id,
          name: doc.name,
          entry: entry,
          type: typ
        };
        _results.push(emit([dt.getYear() + 1900, dt.getMonth() + 1, dt.getDate(), dt.getHours(), dt.getMinutes(), dt.getSeconds(), dt.getMilliseconds()], out));
      }
      return _results;
    }
  };

  s.views.audit_by_timestamp = {
    map: function(doc) {
      var entry, out, typ, _i, _len, _ref, _results;
      _ref = doc.audit;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        typ = doc._id.indexOf('team_') === 0 ? 'team' : 'user';
        out = {
          _id: doc._id,
          name: doc.name,
          entry: entry,
          type: typ
        };
        _results.push(emit(entry.dt, out));
      }
      return _results;
    }
  };

  s.lists.get_values = function(header, req) {
    var out, row, val;
    out = [];
    while ((row = getRow())) {
      val = row.value;
      out.push(val);
    }
    return JSON.stringify(out);
  };

  s.rewrites.audit = {
    from: "/audit",
    to: "/_list/get_values/audit_by_timestamp",
    query: {}
  };

  module.exports = s;

}).call(this);
