// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var actions, audit, auth, dd, h, validation, _;

  _ = require('lib/underscore');

  h = require('./helpers');

  validation = require('lib/validation/validate');

  actions = require('./actions');

  audit = require('./shared/audit');

  auth = validation.auth;

  dd = {
    views: {
      by_resource_id: {
        map: function(doc) {
          var resource, resource_id, resource_name, _ref, _results;
          _ref = doc.rsrcs;
          _results = [];
          for (resource_name in _ref) {
            resource = _ref[resource_name];
            resource_id = resource.id;
            if (resource_id) {
              _results.push(emit([resource_name, resource_id], doc.name));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      },
      by_resource_username: {
        map: function(doc) {
          var resource, resource_name, resource_username, _ref, _results;
          _ref = doc.rsrcs;
          _results = [];
          for (resource_name in _ref) {
            resource = _ref[resource_name];
            resource_username = resource.username;
            if (resource_username) {
              _results.push(emit([resource_name, resource_username], doc.name));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      },
      by_username: {
        map: function(doc) {
          if (doc.data.username) {
            return emit(doc.data.username);
          }
        }
      },
      by_name: {
        map: function(doc) {
          if (doc.name) {
            return emit(doc.name);
          }
        }
      },
      by_auth: {
        map: function(doc) {
          var out, role, _i, _len, _ref, _results;
          _ref = doc.roles;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            role = _ref[_i];
            out = role.split('|');
            out.push(doc.name);
            _results.push(emit(out));
          }
          return _results;
        }
      },
      contractors: {
        map: function(doc) {
          var _ref;
          return emit(((_ref = doc.data) != null ? _ref.contractor : void 0) || false, doc.username);
        }
      }
    },
    lists: {
      get_users: function(header, req) {
        var doc, out, row;
        out = [];
        while ((row = getRow())) {
          doc = row.doc;
          if (!validation._is_user(doc)) {
            continue;
          }
          doc = h.sanitize_user(doc);
          out.push(doc);
        }
        return JSON.stringify(out);
      },
      get_user: function(header, req) {
        var doc, row;
        row = getRow();
        if (row) {
          doc = h.sanitize_user(row.doc);
          return JSON.stringify(doc);
        } else {
          throw ['error', 'not_found', 'document matching query does not exist'];
        }
      }
    },
    shows: {
      get_user: function(doc, req) {
        var user;
        user = h.sanitize_user(doc);
        user.perms = {
          team: {
            add: auth.add_team(user),
            remove: auth.remove_team(user)
          }
        };
        return {
          body: JSON.stringify(user),
          "headers": {
            "Content-Type": "application/json"
          }
        };
      }
    },
    validate_doc_update: actions.validate_doc_update,
    updates: {
      do_action: actions.do_action
    },
    rewrites: [
      {
        from: "/users",
        to: "/_list/get_users/_all_docs",
        method: 'GET',
        query: {
          include_docs: 'true'
        }
      }, {
        from: "/users/:user_id",
        to: "/_show/get_user/:user_id",
        query: {}
      }
    ]
  };

  audit.mixin(dd);

  module.exports = dd;

}).call(this);
