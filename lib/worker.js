// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var conf, couch_utils, db, follow, get_new_synced_state, get_unsynced_audit_entries, iced, org, orgs, resources, start_worker, update_audit_entries, update_audit_entry, utils, validation, wh, _, __iced_k, __iced_k_noop, _i, _len;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  _ = require('underscore');

  follow = require('follow');

  couch_utils = require('./couch_utils');

  conf = require('./config');

  validation = {
    team: require('./design_docs/org/lib/validation'),
    user: require('./design_docs/_users/lib/validation')
  };

  utils = require('./utils');

  wh = require('./worker_helpers');

  orgs = conf.ORGS;

  resources = {
    gh: require('./workers/gh').handlers
  };

  get_unsynced_audit_entries = function(doc) {
    return _.filter(doc, function(entry) {
      return !entry.synced;
    });
  };

  update_audit_entry = function(old_entry, new_synced_state) {
    if (old_entry.synced) {
      return false;
    }
    if (old_entry.synced === new_synced_state) {
      return false;
    }
    old_entry.synced = new_synced_state;
    return true;
  };

  get_new_synced_state = function(old_entry, new_synced_state) {
    if (old_entry.synced) {
      return old_entry.synced;
    }
  };

  update_audit_entries = function(db, doc_id, sync_status, resource_updates, callback) {
    var dirty, doc, entry, entry_id, err, final_synced, new_synced, old_data, old_synced, resource, resp, update, updates, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/greisend/programming/devdash/kratos/src/worker.iced"
        });
        db.get(doc_id, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return doc = arguments[1];
            };
          })(),
          lineno: 33
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          return callback(err);
        }
        dirty = false;
        for (entry_id in sync_status) {
          new_synced = sync_status[entry_id];
          entry = _.findWhere(doc.audit, {
            id: entry_id
          });
          old_synced = entry.synced;
          final_synced = old_synced || new_synced;
          if (final_synced !== old_synced) {
            dirty = true;
            entry.synced = final_synced;
          }
        }
        for (entry_id in resource_updates) {
          updates = resource_updates[entry_id];
          for (resource in updates) {
            update = updates[resource];
            if (update) {
              dirty = true;
              if (validation.team.is_team(doc)) {
                old_data = utils.mk_objs(doc, ['rsrcs', resource, 'data'], {});
              } else if (validation.user.is_user(doc)) {
                old_data = utils.mk_objs(doc, ['rsrcs', resource], {});
              } else {
                old_data = {};
              }
              _.extend(old_data, update);
            }
          }
        }
        (function(__iced_k) {
          if (dirty) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/greisend/programming/devdash/kratos/src/worker.iced"
              });
              db.insert(doc, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return resp = arguments[1];
                  };
                })(),
                lineno: 58
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if ((typeof err !== "undefined" && err !== null ? err.status_code : void 0) === 409) {
                return update_audit_entries(db, doc_id, entries, errs, callback);
              } else {
                return callback(err);
              }
              return __iced_k();
            });
          } else {
            return __iced_k();
          }
        })(function() {
          return callback();
        });
      };
    })(this));
  };

  start_worker = function(db, db_type) {
    var feed, opts;
    opts = {
      db: db.config.url + '/' + db.config.db,
      include_docs: true
    };
    feed = new follow.Feed(opts);
    feed.filter = function(doc, req) {
      if (doc._deleted) {
        return false;
      } else if (!validation[db_type]['is_' + db_type](doc)) {
        return false;
      } else {
        return true;
      }
    };
    feed.on('change', function(change) {
      var doc, entry, err, errs, handler, handlers, resource, resource_updates, sync_status, unsynced_audit_entries, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      console.log('handling ' + db_type + ' change');
      doc = change.doc;
      unsynced_audit_entries = get_unsynced_audit_entries(doc.audit);
      errs = {};
      resource_updates = {};
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/greisend/programming/devdash/kratos/src/worker.iced"
          });
          for (_i = 0, _len = unsynced_audit_entries.length; _i < _len; _i++) {
            entry = unsynced_audit_entries[_i];
            errs[entry.id] = {};
            resource_updates[entry.id] = {};
            handlers = wh.get_handlers(entry, db_type, resources);
            for (resource in handlers) {
              handler = handlers[resource];
              handler(entry, doc, __iced_deferrals.defer({
                assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
                  return function() {
                    __slot_1[__slot_2] = arguments[0];
                    return __slot_3[__slot_4] = arguments[1];
                  };
                })(errs[entry.id], resource, resource_updates[entry.id], resource),
                lineno: 93
              }));
            }
          }
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          sync_status = {};
          _.each(errs, function(rsrc_errs, entry_id) {
            var success;
            success = !Boolean(_.find(rsrc_errs, function(err) {
              return err;
            }));
            if (!success) {
              console.log('ENTRY ERROR:', errs);
            }
            return sync_status[entry_id] = success;
          });
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/greisend/programming/devdash/kratos/src/worker.iced"
            });
            update_audit_entries(db, doc._id, sync_status, resource_updates, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 101
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (err) {
              return console.log(err);
            }
          });
        };
      })(this));
    });
    feed.on('error', function(err) {
      return console.log(err);
    });
    return feed.follow();
  };

  for (_i = 0, _len = orgs.length; _i < _len; _i++) {
    org = orgs[_i];
    db = couch_utils.nano_admin.use('org_' + org);
    start_worker(db, 'team');
  }

  db = couch_utils.nano_admin.use('_users');

  start_worker(db, 'user');

}).call(this);
