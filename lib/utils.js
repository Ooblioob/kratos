// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var Promise, couch_utils, iced, s, x, _, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  _ = require('underscore');

  s = require('underscore.string');

  couch_utils = require('./couch_utils');

  Promise = require('promise');

  x = {};

  x.denodeify_all = function(obj) {
    var k, out, v, _results;
    out = {};
    _results = [];
    for (k in obj) {
      v = obj[k];
      if (_.isFunction(v)) {
        _results.push(out[k] = Promise.denodeify(v));
      } else if (_.isObject(v) && !_.isArray(v)) {
        _results.push(out[k] = x.denodeify_all(v));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  x.denodeify_api = function(obj) {
    var k, pName, v, _results;
    _results = [];
    for (k in obj) {
      v = obj[k];
      if (_.isFunction(v) && !s.startsWith(k, 'handle')) {
        pName = 'p' + s.capitalize(k);
        _results.push(obj[pName] = Promise.denodeify(v));
      } else if (_.isObject(v) && !_.isArray(v)) {
        _results.push(x.denodeify_api(v));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  x.compact_hash = function(hash) {

    /*
    given a hash return a new hash with only non-falsy values. 
    if the hash will be empty, return undefined
     */
    var out;
    out = _.pick(hash, _.identity);
    if (_.isEmpty(out)) {
      return void 0;
    } else {
      return out;
    }
  };

  x.get_org_dbs = function(callback) {
    var dbs, err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);

    /*
    return all organization databases
     */
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/kratos/src/utils.iced",
          funcname: "get_org_dbs"
        });
        couch_utils.nano_admin.db.list(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return dbs = arguments[1];
            };
          })(),
          lineno: 38
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          return callback(err);
        }
        out = _.filter(dbs, function(x) {
          return x.indexOf('org_') === 0;
        });
        return callback(null, out);
      };
    })(this));
  };

  module.exports = x;

}).call(this);
