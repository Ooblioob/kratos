// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var couch_utils, iced, request, resources, teams, utils, uuid, _, __iced_k, __iced_k_noop,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  couch_utils = require('../couch_utils');

  utils = require('../utils');

  request = require('request');

  uuid = require('node-uuid');

  _ = require('underscore');

  resources = {
    gh: require('../workers/gh')
  };

  teams = {};

  teams.handle_create_team = function(req, resp) {
    var now, org, org_db, team_doc, team_id, team_name, user;
    now = +new Date();
    user = req.session.user;
    org = 'org_' + req.params.org_id;
    team_name = req.params.team_id;
    team_id = 'team_' + team_name;
    team_doc = {
      _id: team_id,
      name: team_name,
      rsrcs: {},
      roles: {},
      audit: [
        {
          u: user,
          dt: now,
          a: 't+',
          id: uuid.v4()
        }
      ],
      enforce: []
    };
    org_db = req.couch.use(org);
    return org_db.insert(team_doc).on('response', function(couch_resp) {
      if ((couch_resp.statusCode < 400) || (couch_resp.statusCode === 409)) {
        return teams.get_team(org_db, team_name).pipe(resp);
      } else {
        resp.status(couch_resp.statusCode);
        return couch_resp.pipe(resp);
      }
    });
  };

  teams.get_team = function(org_db, team_id, callback) {
    return couch_utils.rewrite(org_db, 'base', '/teams/team_' + team_id, callback);
  };

  teams.handle_get_team = function(req, resp) {
    var org, org_db;
    org = 'org_' + req.params.org_id;
    org_db = req.couch.use(org);
    return teams.get_team(org_db, req.params.team_id).pipe(resp);
  };

  teams.get_teams = function(org_db, callback) {
    return couch_utils.rewrite(org_db, 'base', '/teams', callback);
  };

  teams.get_all_teams = function(callback) {
    var err, errs, i, org_db, org_id, org_ids, out, resps, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/kratos/src/api/teams.iced",
          funcname: "get_all_teams"
        });
        utils.get_org_dbs(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return org_ids = arguments[1];
            };
          })(),
          lineno: 48
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          return callback(err);
        }
        errs = [];
        resps = [];
        (function(__iced_k) {
          var _i, _len;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/opt/kratos/src/api/teams.iced",
            funcname: "get_all_teams"
          });
          for (i = _i = 0, _len = org_ids.length; _i < _len; i = ++_i) {
            org_id = org_ids[i];
            org_db = couch_utils.nano_admin.use(org_id);
            teams.get_teams(org_db, __iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
                return function() {
                  __slot_1[__slot_2] = arguments[0];
                  return __slot_3[__slot_4] = arguments[1];
                };
              })(errs, i, resps, i),
              lineno: 55
            }));
          }
          __iced_deferrals._fulfill();
        })(function() {
          errs = _.compact(errs);
          if (errs.length) {
            return callback(errs);
          }
          out = _.flatten(resps, true);
          return callback(null, out);
        });
      };
    })(this));
  };

  teams.getTeamRolesForUser = function(user, callback) {
    var all_teams, err, role, role_data, team, team_roles, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);

    /*
    return an array of team/role hashes to which the user belongs:
      [{team: <obj>, role: <str>}]
     */
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/kratos/src/api/teams.iced",
          funcname: "getTeamRolesForUser"
        });
        teams.get_all_teams(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return all_teams = arguments[1];
            };
          })(),
          lineno: 66
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        var _i, _len, _ref, _ref1;
        if (err) {
          return callback(err);
        }
        team_roles = [];
        for (_i = 0, _len = all_teams.length; _i < _len; _i++) {
          team = all_teams[_i];
          _ref = team.roles;
          for (role in _ref) {
            role_data = _ref[role];
            if (_ref1 = user.name, __indexOf.call(role_data.members || [], _ref1) >= 0) {
              team_roles.push({
                team: team,
                role: role
              });
            }
          }
        }
        return callback(null, team_roles);
      };
    })(this));
  };

  teams.handle_get_teams = function(req, resp) {
    var org, org_db;
    org = 'org_' + req.params.org_id;
    org_db = req.couch.use(org);
    return teams.get_teams(org_db).pipe(resp);
  };

  teams.handle_add_remove_member_asset = function(action_type) {
    return function(req, resp) {
      var action, db, org, team;
      org = 'org_' + req.params.org_id;
      team = 'team_' + req.params.team_id;
      db = req.couch.use(org);
      action = {
        action: action_type,
        key: req.params.key,
        value: req.params.value,
        uuid: uuid.v4()
      };
      return db.atomic('base', 'do_action', team, action).pipe(resp);
    };
  };

  teams.handle_add_asset = function(req, resp) {
    var err, handler, new_asset, new_val, org, team, team_id, team_req, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    org = 'org_' + req.params.org_id;
    team_id = 'team_' + req.params.team_id;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/kratos/src/api/teams.iced",
          funcname: "handle_add_asset"
        });
        team_req = req.couch.use(org).get(team_id, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return team = arguments[1];
            };
          })(),
          lineno: 100
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        var _ref;
        if (err) {
          return team_req.pipe(resp);
        }
        new_val = req.body["new"];
        if (!new_val) {
          return resp.status(400).end(JSON.stringify({
            'error': 'bad_request ',
            'msg': '"new" value must be present'
          }));
        }
        handler = (_ref = resources[req.params.key]) != null ? _ref.add_asset : void 0;
        if (!handler) {
          return resp.status(404).send(JSON.stringify({
            error: "not_found",
            msg: 'Resource, ' + req.params.key + ', not found.'
          }));
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/opt/kratos/src/api/teams.iced",
            funcname: "handle_add_asset"
          });
          handler(new_val, team).nodeify(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return new_asset = arguments[1];
              };
            })(),
            lineno: 112
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err) {
            console.log(err);
            return resp.status(500).send(JSON.stringify({
              error: "internal_error",
              msg: 'Something went wrong'
            }));
          }
          if (typeof new_asset === "undefined" || new_asset === null) {
            return resp.send(JSON.stringify(team));
          }
          new_asset.id = uuid.v4();
          req.params.value = new_asset;
          console.log(req.body, req.params.value);
          return teams.handle_add_remove_member_asset('a+')(req, resp);
        });
      };
    })(this));
  };

  utils.denodeify_api(teams);

  module.exports = teams;

}).call(this);
