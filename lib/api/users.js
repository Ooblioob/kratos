// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var conf, couch_utils, iced, isInt, user_db, users, uuid, _, __iced_k, __iced_k_noop, _add_remove_role;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  _ = require('underscore');

  couch_utils = require('../couch_utils');

  users = {};

  user_db = couch_utils.nano_admin.use('_users');

  uuid = require('node-uuid');

  conf = require('../config');

  isInt = function(s) {
    return String(parseInt(s)) === s;
  };

  users._get_users = function(callback) {
    return couch_utils.rewrite(user_db, 'base', '/users', callback);
  };

  users.get_users = function(req, resp) {
    var resource, rsrcs_id, _ref;
    _ref = req.query;
    for (resource in _ref) {
      rsrcs_id = _ref[resource];
      break;
    }
    if (resource) {
      if (isInt(rsrcs_id)) {
        rsrcs_id = parseInt(rsrcs_id);
      }
      return user_db.viewWithList('base', 'by_resource_id', 'get_user', {
        include_docs: true,
        key: [resource, rsrcs_id]
      }).pipe(resp);
    } else {
      return users._get_users().pipe(resp);
    }
  };

  users._get_user = function(user_id, callback) {
    return couch_utils.rewrite(user_db, 'base', '/users/org.couchdb.user:' + user_id, callback);
  };

  users.get_user = function(req, resp) {
    return users._get_user(req.params.user_id).pipe(resp);
  };

  _add_remove_role = function(client, action_type, user, resource, role, callback) {
    var action;
    action = {
      action: action_type,
      key: resource,
      value: role,
      uuid: uuid.v4()
    };
    return client.use('_users').atomic('base', 'do_action', user, action, callback);
  };

  users._add_role = function(client, user, resource, role, callback) {
    return _add_remove_role(client, 'a+', user, resource, role, callback);
  };

  users._remove_role = function(client, user, resource, role, callback) {
    return _add_remove_role(client, 'a-', user, resource, role, callback);
  };

  users.add_remove_role = function(action_type) {
    return function(req, resp) {
      var resource, role, user;
      user = 'org.couchdb.user:' + req.params.user_id;
      resource = req.params.resource;
      role = req.params.role;
      return _add_remove_role(req.couch, action_type, user, resource, role).pipe(resp);
    };
  };

  users.add_data = function(req, resp) {
    var action, key, path_string, user, value;
    user = 'org.couchdb.user:' + req.params.user_id;
    path_string = req.params.path || '';
    key = _.compact(path_string.split('/'));
    value = req.body;
    if (_.isArray(value) || !_.isObject(value)) {
      return resp.status(400).end(JSON.stringify({
        'error': 'bad_request ',
        'msg': 'data must be an object - {}'
      }));
    }
    action = {
      action: 'd+',
      key: key,
      value: value,
      uuid: uuid.v4()
    };
    return req.couch.use('_users').atomic('base', 'do_action', user, action).pipe(resp);
  };

  users.add_user = function(req, resp) {
    var err, name, now, user, user_resp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);

    /*
    body must be a hash ({}).
    body must include the following data:
    {
      data: {
        username: <str>,
        <optional additional data>...
      }
    }
    body may include the following data:
    {
      roles: <array>
      rsrcs: {
        <rsrc str>: <hash>
      }
    
    }
     */
    now = +new Date();
    user = _.extend({
      roles: []
    }, req.body);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/kratos/src/api/users.iced",
          funcname: "add_user"
        });
        couch_utils.get_uuid(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return name = arguments[1];
            };
          })(),
          lineno: 93
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        _.extend(user, {
          _id: "org.couchdb.user:" + name,
          type: "user",
          name: name,
          password: conf.COUCH_PWD,
          audit: [
            {
              u: req.session.user,
              dt: now,
              a: 'u+',
              id: uuid.v4(),
              r: req.body
            }
          ]
        });
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/opt/kratos/src/api/users.iced",
            funcname: "add_user"
          });
          req = req.couch.use('_users').insert(user, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return user_resp = arguments[1];
              };
            })(),
            lineno: 101
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err) {
            return resp.status(err.statusCode).send(JSON.stringify({
              error: err.error,
              msg: err.reason
            }));
          } else {
            return users._get_user(name).pipe(resp);
          }
        });
      };
    })(this));
  };

  module.exports = users;

}).call(this);
