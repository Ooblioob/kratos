// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var audit, conf, couch_utils, iced, orgs, _, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  couch_utils = require('../couch_utils');

  conf = require('../config');

  orgs = conf.ORGS;

  _ = require('underscore');

  audit = {};

  audit.get_audit = function(start_date, end_date, callback) {
    var db, dbs, entries, errs, i, opts, resps, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    opts = {
      path: '/audit',
      qs: {}
    };
    if ((start_date != null) && !isNaN(start_date)) {
      opts.qs.startkey = start_date;
    }
    if ((end_date != null) && !isNaN(end_date)) {
      opts.qs.endkey = end_date;
    }
    dbs = orgs.map(function(org) {
      return couch_utils.nano_system_user.use('org_' + org);
    });
    dbs.push(couch_utils.nano_system_user.use('_users'));
    errs = [];
    resps = [];
    (function(_this) {
      return (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/kratos/src/api/audit.iced",
          funcname: "get_audit"
        });
        for (i = _i = 0, _len = dbs.length; _i < _len; i = ++_i) {
          db = dbs[i];
          couch_utils.rewrite(db, 'base', opts, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
              return function() {
                __slot_1[__slot_2] = arguments[0];
                return __slot_3[__slot_4] = arguments[1];
              };
            })(errs, i, resps, i),
            lineno: 23
          }));
        }
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        errs = _.compact(errs);
        if (errs.length) {
          return callback(errs);
        }
        entries = _.flatten(resps, true);
        entries = _.sortBy(entries, function(entry) {
          return entry.entry.dt;
        });
        return callback(null, entries);
      };
    })(this));
  };

  audit.handle_get_audit = function(req, resp) {
    var end_date, entries, err, start_date, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    start_date = parseInt(req.query.start);
    end_date = parseInt(req.query.end);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/kratos/src/api/audit.iced",
          funcname: "handle_get_audit"
        });
        audit.get_audit(start_date, end_date, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return entries = arguments[1];
            };
          })(),
          lineno: 35
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          console.log('handle_get_audit', err);
          return resp.status(500).send(JSON.stringify({
            error: 'internal error',
            msg: 'internal error'
          }));
        }
        return resp.send(JSON.stringify(entries));
      };
    })(this));
  };

  module.exports = audit;

}).call(this);
