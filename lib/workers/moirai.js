// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var Promise, auth, conf, emptyResolve, getOrCreateAsset, handleAddCluster, handleAddData, handleAddUser, handleRemoveCluster, handleRemoveUser, moirai, users, _;

  _ = require('underscore');

  users = require('../api/users');

  auth = require('../validation/validate').auth;

  Promise = require('pantheon-helpers/lib/promise');

  conf = require('../config');

  moirai = {};

  moirai.moiraiClient = Promise.RestClient({
    url: conf.MOIRAI.URL,
    auth: conf.MOIRAI.ADMIN_CREDENTIALS,
    json: true
  });

  emptyResolve = function() {
    return Promise.resolve();
  };

  moirai.setClusterKeys = function(clusterId, keys) {
    var url;
    url = '/moirai/clusters/' + clusterId + '/keys';
    return moirai.moiraiClient.put({
      url: url,
      json: keys,
      body_only: true
    });
  };

  moirai.getTeamKeys = function(team) {
    var adminNames, allMemberNames, memberNames;
    adminNames = team.roles.admin.members;
    memberNames = team.roles.member.members;
    allMemberNames = _.unique(adminNames.concat(memberNames));
    return users.get_users_by_name(allMemberNames).then(function(userList) {
      var keyList;
      keyList = userList.map(function(user) {
        return _.findWhere(user.data.publicKeys || [], {
          name: 'moirai'
        });
      });
      return Promise.resolve(_.compact(keyList).map(function(key) {
        return key.key;
      }));
    });
  };

  moirai.setTeamKeys = function(team) {
    return moirai.getTeamKeys(team).then(function(keys) {
      var clusterIds, clusters, promisesList;
      clusters = team.rsrcs.moirai.assets;
      clusterIds = _.pluck(clusters, 'cluster_id');
      promisesList = clusterIds.map(function(clusterId) {
        return moirai.setClusterKeys(clusterId, keys);
      });
      return Promise.all(promisesList).then(emptyResolve);
    });
  };

  handleAddUser = function(event, team) {
    return moirai.setTeamKeys(team);
  };

  handleRemoveUser = function(event, team) {
    return moirai.setTeamKeys(team);
  };

  moirai.removeCluster = function(cluster_id) {
    var url;
    url = '/moirai/clusters/' + cluster_id;
    return moirai.moiraiClient.del(url);
  };

  handleRemoveCluster = function(event, team) {
    var cluster_id;
    cluster_id = event.asset.id;
    return moirai.removeCluster(cluster_id).then(emptyResolve);
  };

  handleAddCluster = function(event, team) {
    var cluster_id;
    cluster_id = event.asset.id;
    return moirai.getTeamKeys(team).then(function(keys) {
      return moirai.setClusterKeys(cluster_id, keys).then(emptyResolve);
    });
  };

  handleAddData = function(event, team) {
    return moirai.setTeamKeys(team);
  };

  getOrCreateAsset = function(assetData, team) {
    var clusters, existingClusterWithName, url;
    url = '/moirai/clusters';
    clusters = team.rsrcs.moirai.assets;
    existingClusterWithName = _.findWhere(clusters, {
      name: assetData.name
    });
    if (existingClusterWithName != null) {
      return Promise.resolve(existingClusterWithName);
    } else {
      return moirai.moiraiClient.post({
        url: url,
        json: assetData,
        body_only: true
      }).then(function(newClusterData) {
        return Promise.resolve({
          cluster_id: newClusterData._id,
          name: newClusterData.name
        });
      });
    }
  };

  module.exports = {
    handlers: {
      team: {
        'u+': handleAddUser,
        'u-': handleRemoveUser,
        't+': null,
        't-': null,
        self: {
          'a+': handleAddCluster,
          'a-': handleRemoveCluster
        },
        other: {
          'a+': null,
          'a-': null
        }
      },
      user: {
        self: {
          'r+': null,
          'r-': null
        },
        other: {
          'r+': null,
          'r-': null
        },
        'u+': null,
        'u-': null,
        'd+': handleAddData
      }
    },
    getOrCreateAsset: getOrCreateAsset,
    testing: moirai
  };

}).call(this);
