// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var validation,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  validation = function(validation) {
    var auth;
    auth = validation.auth;
    validation.validation = {
      add_team: function(team) {},
      remove_team: function(team) {},
      add_team_asset: function(team, resource, asset) {
        var _ref;
        if (((_ref = validation.validation[resource]) != null ? _ref.add_team_asset : void 0) == null) {
          throw 'resource, ' + resource + ', does not support adding assets';
        }
        return validation.validation[resource].add_team_asset(team, asset);
      },
      remove_team_asset: function(team, resource, asset) {
        var _ref;
        if (((_ref = validation.validation[resource]) != null ? _ref.remove_team_asset : void 0) == null) {
          throw 'resource, ' + resource + ', does not support removing assets';
        }
        return validation.validation[resource].remove_team_asset(team, asset);
      },
      add_team_member: function(team, user, role) {
        if (__indexOf.call(auth.roles.team_admin, role) < 0 && __indexOf.call(auth.roles.team, role) < 0) {
          throw 'invalid role: ' + role;
        }
      },
      remove_team_member: function(team, user, role) {},
      add_user: function(user) {},
      remove_user: function(user) {},
      add_resource_role: function(user, resource, role) {
        if (!auth.is_active_user(user)) {
          throw 'invalid user: ' + user.name;
        }
        if (__indexOf.call(auth.roles.resource[resource] || [], role) < 0) {
          throw 'invalid role: ' + role;
        }
      },
      remove_resource_role: function(user, resource, role) {}
    };
    if (typeof window === "undefined" || window === null) {
      return require('./gh')(validation.validation);
    }
  };

  if (typeof window !== "undefined" && window !== null) {
    validation(window.kratos.validation);
  } else {
    module.exports = validation;
  }

}).call(this);
